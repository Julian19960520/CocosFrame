{"version":3,"sources":["DataBind.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/TypeScript/System","sourcesContent":["export namespace DB{\n    export class Data{\n        value:any = null;\n        listeners = [];\n        \n        //以value为参数，触发监听该数据的所有监听器\n        //saveMode : 安全模式，开启时，将会把所有监听器拷贝到临时数组，再依次触发，\n        //            避免在其中某个监听器中Bind或UnBind改变listeners数组数量，导致数组串位。\n        public Invoke(saveMode){\n            let temp;\n            let len = this.listeners.length;\n            if(saveMode){\n                temp = [];\n                for(let i=0; i<len; i++){\n                    temp.push(this.listeners[i]);\n                }\n            }else{\n                temp = this.listeners;\n            }\n            for(let i=0; i<len; i++){\n                temp[i](this.value);\n            }\n        }\n    }\n\n    let map:Map<string, Data> = new Map<string, Data>();\n    //向指定key增加一个监听器\n    export function Bind(key:string, listener:(any)=>void){\n        let data = map.get(key);\n        if(!data){\n            data = new Data();\n            map.set(key, data);\n        }\n        if(data.listeners.indexOf(listener) <= 0){\n            data.listeners.push(listener);\n        }\n        listener(data.value);\n    }\n    //绑定服务端数据\n    export function BindRemote(key:string, listener:(any)=>void){\n        Bind(key, listener);\n        // Server.Get(key, (data)=>{\n        //     Set(key, data);\n        // },()=>{\n            \n        // });\n    }\n    //取消绑定一个监听器\n    export function UnBind(key:string, listener:(any)=>void){\n        let data = map.get(key);\n        if(data){\n            let index = data.listeners.indexOf(listener);\n            if(index <= 0){\n                data.listeners.splice(index, 1);\n            }\n        }\n    }\n    //设置数据的值，如果数据改变，则触发监听该数据的所有监听器\n    export function Set(key:string, value, saveMode:boolean = false){\n        let data = map.get(key);\n        if(!data){\n            data = new Data();\n            data.value = value;\n            map.set(key, data);\n        }else{\n            if(value !== data.value){\n                data.value = value;\n                data.Invoke(saveMode);\n            }\n        }\n    }\n    export function Get(key:string){\n        let data = map.get(key);\n        if(data){\n            return data.value;\n        }else return null;\n    }\n    //触发监听该数据的所有监听器\n    export function Invoke(key:string, saveMode:boolean = false){\n        let data = map.get(key);\n        if(data){\n            data.Invoke(saveMode);\n        }\n    }\n    export class DataBindComponent extends cc.Component{\n        private map:Map<string, (any)=>void> = new Map<string, (any)=>void>();\n\n        public Bind(key, listener:(any)=>void){\n            this.map.set(key, listener);\n            DB.Bind(key, listener);\n        }\n        onDestroy(){\n            this.map.forEach((v, k)=>{\n                DB.UnBind(k, v);\n            });\n        }\n    }\n}"]}