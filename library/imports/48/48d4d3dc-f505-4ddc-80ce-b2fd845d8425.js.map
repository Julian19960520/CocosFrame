{"version":3,"sources":["../../../../../assets/TypeScript/System/assets/TypeScript/System/Scene.ts"],"names":[],"mappings":";;;;AAAA,oBAAoB;AACpB,kFAAkF;AAClF,yFAAyF;AACzF,mBAAmB;AACnB,4FAA4F;AAC5F,mGAAmG;AACnG,8BAA8B;AAC9B,4FAA4F;AAC5F,mGAAmG;;AAE7F,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAyB,CAAC;AAC1C,uCAA8B;AAC9B,2CAAsC;AACtC,+BAA8B;AAE9B;IAAmC,yBAAoB;IADvD;QAAA,qEAqDC;QAlDU,iBAAW,GAAG,IAAI,CAAC;QAEnB,cAAQ,GAAW,IAAI,CAAC;QAExB,cAAQ,GAAW,IAAI,CAAC;QAExB,mBAAa,GAAW,IAAI,CAAC;QAE7B,mBAAa,GAAY,EAAE,CAAC;QAC5B,gBAAU,GAAc,IAAI,CAAC;;IAyCxC,CAAC;IAvCG,eAAe;IACP,8BAAc,GAAtB;QAAA,iBAaC;QAZG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,IAAG,KAAI,CAAC,UAAU,EAAC;gBACf,OAAO,CAAC,KAAI,CAAC,UAAU,CAAC,CAAA;aAC3B;iBAAI;gBACD,WAAI,CAAC,aAAa,CAAC,mBAAmB,EAAC,UAAC,IAAY;oBAChD,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBACzB,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,oBAAU,CAAC,CAAC;oBAChD,KAAI,CAAC,UAAU,CAAC,KAAK,GAAG,KAAI,CAAC;oBAC7B,OAAO,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IACD,gCAAgC;IACzB,+BAAe,GAAtB,UAAuB,IAAW,EAAE,QAAQ;QAA5C,iBAKC;QAJG,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,UAAC,UAAqB;YAC7C,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,KAAI,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;YAC7D,UAAU,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAA;IACN,CAAC;IACD,gCAAgC;IACzB,+BAAe,GAAtB,UAAuB,IAAW,EAAE,QAAQ;QAA5C,iBAKC;QAJG,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,UAAC,UAAqB;YAC7C,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,KAAI,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;YAC7D,UAAU,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAA;IACN,CAAC;IACD,QAAQ;IACD,wBAAQ,GAAf;QACI,IAAG,IAAI,CAAC,UAAU,EAAC;YACf,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;SAChC;IACL,CAAC;IACD,6BAA6B;IACtB,6BAAa,GAApB,UAAqB,IAAW,EAAE,QAAQ;QACtC,WAAI,CAAC,aAAa,CAAC,WAAS,IAAI,CAAC,IAAI,CAAC,IAAI,SAAI,IAAM,EAAC,QAAQ,CAAC,CAAC;IACnE,CAAC;IAjDD;QADC,QAAQ;8CACiB;IAE1B;QADC,QAAQ;2CACsB;IAE/B;QADC,QAAQ;2CACsB;IAE/B;QADC,QAAQ;gDAC2B;IARnB,KAAK;QADzB,OAAO;OACa,KAAK,CAoDzB;IAAD,YAAC;CApDD,AAoDC,CApDkC,aAAE,CAAC,iBAAiB,GAoDtD;kBApDoB,KAAK","file":"","sourceRoot":"../../../../../assets/TypeScript/System","sourcesContent":["// Learn TypeScript:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\nimport {DB} from \"./DataBind\";\nimport PanelStack from \"./PanelStack\";\nimport { Util } from \"./Util\";\n@ccclass\nexport default class Scene extends DB.DataBindComponent {\n    @property\n    public autoDestroy = true;\n    @property\n    public showBack:boolean = true;\n    @property\n    public showHome:boolean = true;\n    @property\n    public showEnergyBar:boolean = true;\n    \n    public navigatorItem:string[] = [];\n    public panelStack:PanelStack = null;\n\n    //初始化PanelStack\n    private initPanelStack(){\n        return new Promise((resolve, reject)=>{\n            if(this.panelStack){\n                resolve(this.panelStack)\n            }else{\n                Util.instantPrefab(\"Prefab/PanelStack\",(node:cc.Node)=>{\n                    this.node.addChild(node);\n                    this.panelStack = node.getComponent(PanelStack);\n                    this.panelStack.scene = this;\n                    resolve(this.panelStack);\n                });\n            }\n        })\n    }\n    //打开一个面板，以resource文件夹作为根查找prefab\n    public OpenPanelByName(name:string, callback){\n        this.initPanelStack().then((panelStack:PanelStack)=>{\n            panelStack.node.setSiblingIndex(this.node.childrenCount - 1);\n            panelStack.OpenByName(name, callback);\n        })\n    }\n    //打开一个面板，以resource文件夹作为根查找prefab\n    public OpenPanelByPath(path:string, callback){\n        this.initPanelStack().then((panelStack:PanelStack)=>{\n            panelStack.node.setSiblingIndex(this.node.childrenCount - 1);\n            panelStack.OpenByPath(path, callback);\n        })\n    }\n    //弹出栈顶面板\n    public PopPanel(){\n        if(this.panelStack){\n            this.panelStack.PopCurrent();\n        }\n    }\n    //读取一个prefab，从场景所在文件夹查找prefab\n    public instantPrefab(name:string, callback){\n        Util.instantPrefab(`Scene/${this.node.name}/${name}`,callback);\n    }\n}\n"]}